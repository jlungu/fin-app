{"ast":null,"code":"var _jsxFileName = \"/Users/james/iCloud Drive (Archive)/Documents/Code/fin-app/frontend/src/components/ChartComponent.js\";\nimport React, { Component } from \"react\";\nimport Plotly from \"plotly.js-dist\";\nimport Spinner from \"react-bootstrap/Spinner\";\nexport class ChartComponent extends Component {\n  constructor(props) {\n    super(props);\n    /*So, we got to grab array of opens, highs , lows frmo API. Have separate ones, first up is for \n            the 1 Day chart. Only need 9-5*/\n\n    this.getLinearPlot = () => {\n      //Simple displays linear plot, according to the parameter passed (Day, week, etc...)\n      //Linear data\n      const {\n        dayTime,\n        dayHigh,\n        fiveTime,\n        fiveHigh,\n        monTime,\n        monHigh,\n        ytdTime,\n        ytdHigh,\n        yrHigh,\n        yrTime\n      } = this.state; //CandlestickData\n\n      const {\n        dayClose,\n        dayLow,\n        dayOpen,\n        fiveClose,\n        fiveLow,\n        fiveOpen,\n        monClose,\n        monLow,\n        monOpen,\n        ytdClose,\n        ytdLow,\n        ytdOpen,\n        yrClose,\n        yrLow,\n        yrOpen\n      } = this.state;\n      var dayColor = dayHigh ? dayHigh[0] <= dayHigh[dayHigh.length - 1] ? 'green' : 'red' : 'black';\n      var fiveColor = fiveHigh ? fiveHigh[0] <= fiveHigh[fiveHigh.length - 1] ? 'green' : 'red' : 'black';\n      var monColor = monHigh ? monHigh[0] <= monHigh[monHigh.length - 1] ? 'green' : 'red' : 'black';\n      var ytdColor = ytdHigh ? ytdHigh[0] <= ytdHigh[ytdHigh.length - 1] ? 'green' : 'red' : 'black';\n      var yrColor = yrHigh ? yrHigh[0] <= yrHigh[yrHigh.length - 1] ? 'green' : 'red' : 'black';\n      var linearData = [{\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol + \"High\",\n        x: dayTime ? dayTime.map(t => new Date(t * 1000).toLocaleTimeString()) : [],\n        y: dayHigh ? dayHigh : [],\n        line: {\n          color: dayColor\n        },\n        visible: true\n      }, {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol + \" High\",\n        x: fiveTime ? fiveTime.map(t => this.formatDateTime(new Date(t * 1000))) : [],\n        y: fiveHigh ? fiveHigh : [],\n        connectgaps: true,\n        line: {\n          color: fiveColor\n        },\n        visible: false\n      }, {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol + \" High\",\n        x: monTime ? monTime.map(t => this.formatDateTime(new Date(t * 1000))) : [],\n        y: monHigh ? monHigh : [],\n        line: {\n          color: monColor\n        },\n        visible: false,\n        connectgaps: true\n      }, {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol + \" High\",\n        x: ytdTime ? ytdTime.map(t => this.formatDate(new Date(t * 1000))) : [],\n        y: ytdHigh ? ytdHigh : [],\n        line: {\n          color: ytdColor\n        },\n        visible: false,\n        connectgaps: true\n      }, {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol + \" High\",\n        x: yrTime ? yrTime.map(t => this.formatDate(new Date(t * 1000))) : [],\n        y: yrHigh ? yrHigh : [],\n        line: {\n          color: yrColor\n        },\n        visible: false\n      }];\n      var candlestickData = [{\n        x: dayTime ? dayTime.map(t => new Date(t * 1000).toLocaleTimeString()) : [],\n        close: dayClose ? dayClose : [],\n        high: dayHigh ? dayHigh : [],\n        low: dayLow ? dayLow : [],\n        open: dayOpen ? dayOpen : [],\n        visible: true,\n        name: \"\",\n        // cutomise colors\n        increasing: {\n          line: {\n            color: 'green'\n          }\n        },\n        decreasing: {\n          line: {\n            color: 'red'\n          }\n        },\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      }, {\n        x: fiveTime ? fiveTime.map(t => this.formatDateTime(new Date(t * 1000))) : [],\n        close: fiveClose ? fiveClose : [],\n        high: fiveHigh ? fiveHigh : [],\n        low: fiveLow ? fiveLow : [],\n        open: fiveOpen ? fiveOpen : [],\n        visible: false,\n        name: \"\",\n        // cutomise colors\n        increasing: {\n          line: {\n            color: 'green'\n          }\n        },\n        decreasing: {\n          line: {\n            color: 'red'\n          }\n        },\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      }, {\n        x: monTime ? monTime.map(t => this.formatDateTime(new Date(t * 1000))) : [],\n        close: monClose ? monClose : [],\n        high: monHigh ? monHigh : [],\n        low: monLow ? monLow : [],\n        open: monOpen ? monOpen : [],\n        visible: false,\n        name: \"\",\n        // cutomise colors\n        increasing: {\n          line: {\n            color: 'green'\n          }\n        },\n        decreasing: {\n          line: {\n            color: 'red'\n          }\n        },\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      }, {\n        x: ytdTime ? ytdTime.map(t => this.formatDate(new Date(t * 1000))) : [],\n        close: ytdClose ? ytdClose : [],\n        high: ytdHigh ? ytdHigh : [],\n        low: ytdLow ? ytdLow : [],\n        open: ytdOpen ? ytdOpen : [],\n        visible: false,\n        name: \"\",\n        // cutomise colors\n        increasing: {\n          line: {\n            color: 'green'\n          }\n        },\n        decreasing: {\n          line: {\n            color: 'red'\n          }\n        },\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      }, {\n        x: yrTime ? yrTime.map(t => this.formatDate(new Date(t * 1000))) : [],\n        close: yrClose ? yrClose : [],\n        high: yrHigh ? yrHigh : [],\n        low: yrLow ? yrLow : [],\n        open: yrOpen ? yrOpen : [],\n        visible: false,\n        name: \"\",\n        // cutomise colors\n        increasing: {\n          line: {\n            color: 'green'\n          }\n        },\n        decreasing: {\n          line: {\n            color: 'red'\n          }\n        },\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      }];\n      var updatemenus = [{\n        buttons: [{\n          args: [{\n            'visible': [true, false, false, false, false]\n          }],\n          label: '1D',\n          method: 'update'\n        }, {\n          args: [{\n            'visible': [false, true, false, false, false]\n          }],\n          label: '5D',\n          method: 'update'\n        }, {\n          args: [{\n            'visible': [false, false, true, false, false]\n          }],\n          label: '1M',\n          method: 'update'\n        }, {\n          args: [{\n            'visible': [false, false, false, true, false]\n          }],\n          label: 'YTD',\n          method: 'update'\n        }, {\n          args: [{\n            'visible': [false, false, false, false, true]\n          }],\n          label: '1Y',\n          method: 'update'\n        }],\n        direction: 'left',\n        showactive: true,\n        type: 'buttons',\n        x: 0.0,\n        xanchor: 'left',\n        y: 1.1,\n        yanchor: 'top'\n      }];\n      var layout = {\n        updatemenus: updatemenus,\n        xaxis: {\n          rangeslider: {\n            visible: true\n          },\n          showticklabels: false,\n          type: 'category',\n          showgrid: false\n        },\n        width: 900,\n        height: 500\n      };\n      Plotly.newPlot(\"timePlot\", this.state.plot ? this.state.linearPlot ? linearData : candlestickData : null, layout);\n    };\n\n    this.swapPlotType = type => {\n      if (type == \"line\") this.setState({\n        linearPlot: true\n      });else if (type == \"candle\") {\n        this.setState({\n          linearPlot: false\n        });\n      }\n    };\n\n    this.state = {\n      date: new Date(),\n      //Reference, need TODAYs, or YESTARDAYS... etc.\n      dayOpen: [],\n      day: {},\n      dayHigh: [],\n      dayLow: [],\n      dayClose: [],\n      dayTime: [],\n      data: {},\n      fiveOpen: [],\n      //Five day chart data...\n      fiveHigh: [],\n      fiveLow: [],\n      fiveClose: [],\n      fiveTime: [],\n      monOpen: [],\n      //One month chart data...\n      monHigh: [],\n      monLow: [],\n      monClose: [],\n      monTime: [],\n      ytdOpen: [],\n      //Year to date chart data...\n      ytdHigh: [],\n      ytdLow: [],\n      ytdClose: [],\n      ytdTime: [],\n      ytdOpen: [],\n      //Year chart data...\n      yrHigh: [],\n      yrLow: [],\n      yrClose: [],\n      yrTime: [],\n      plot: true,\n      linearPlot: true\n    };\n  }\n\n  componentDidMount() {\n    /*Time for some API calls!*/\n    //First, we got the 1 day one....relative to TODAYS date\n    //If its a WWEEKEND, we need to get the last market days info...\n    var day = this.state.date.getDate();\n    const date = this.state.date;\n    console.log(date.getDay());\n\n    if (date.getDay() == 6) {\n      //Its SATURDAY. Get FRIDAYS...\n      day -= 1;\n    } else if (date.getDay() == 0) {\n      //Its SUNDAY. Get FRIDAYS...\n      day -= 2;\n    }\n\n    var start = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 9, 30, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    var end = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000); //Now, well do an API call for ONE DAY.\n\n    fetch(\"https://finnhub.io/api/v1/stock/candle?symbol=\" + this.props.symbol + \"&resolution=5&from=\" + start + \"&to=\" + end + \"&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => this.setState({\n      dayOpen: data.o,\n      dayHigh: data.h,\n      dayLow: data.l,\n      dayClose: data.c,\n      dayTime: data.t,\n      date: data\n    })); //Now, we need data for 5 DAYS. Past 5 days, EXCLUDING WEEKENDS.\n\n    var startDay = day - 5;\n    start = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day - 7, 9, 30, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    end = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    fetch(\"https://finnhub.io/api/v1/stock/candle?symbol=\" + this.props.symbol + \"&resolution=30&from=\" + start + \"&to=\" + end + \"&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => {\n      var date = null;\n      var open = [];\n      var high = [];\n      var low = [];\n      var close = [];\n      var time = [];\n\n      if (data.o) {\n        //Here, we just filter the API call results to the normal market hours, 9:30AM - 4PM\n        for (let i = 0; i < data.o.length; i++) {\n          date = new Date(data.t[i] * 1000);\n\n          if (date.getHours() >= 9 && date.getHours() <= 16) {\n            if (date.getHours() == 9) {\n              if (date.getMinutes() >= 30) {\n                open.push(data.o[i]);\n                high.push(data.h[i]);\n                low.push(data.l[i]);\n                close.push(data.c[i]);\n                time.push(data.t[i]);\n              }\n            } else if (date.getHours() == 16) {\n              if (date.getMinutes() < 30) {\n                open.push(data.o[i]);\n                high.push(data.h[i]);\n                low.push(data.l[i]);\n                close.push(data.c[i]);\n                time.push(data.t[i]);\n              }\n            } else {\n              open.push(data.o[i]);\n              high.push(data.h[i]);\n              low.push(data.l[i]);\n              close.push(data.c[i]);\n              time.push(data.t[i]);\n            }\n          }\n        }\n      }\n\n      this.setState({\n        fiveOpen: open,\n        fiveHigh: high,\n        fiveLow: low,\n        fiveClose: close,\n        fiveTime: time\n      });\n    }); //Now, we need data for ONE MONTH. Past month, eventually well exclude weekends...\n\n    start = Math.trunc(new Date(date.getFullYear(), date.getMonth() - 1, day, 9, 30, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    end = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    fetch(\"https://finnhub.io/api/v1/stock/candle?symbol=\" + this.props.symbol + \"&resolution=60&from=\" + start + \"&to=\" + end + \"&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => {\n      var date = null;\n      var open = [];\n      var high = [];\n      var low = [];\n      var close = [];\n      var time = []; //Here, we just filter the API call results to the normal market hours, 9:30AM - 4PM\n\n      for (let i = 0; i < data.o.length; i++) {\n        date = new Date(data.t[i] * 1000);\n\n        if (date.getHours() >= 9 && date.getHours() <= 16) {\n          open.push(data.o[i]);\n          high.push(data.h[i]);\n          low.push(data.l[i]);\n          close.push(data.c[i]);\n          time.push(data.t[i]);\n        }\n      }\n\n      this.setState({\n        monOpen: open,\n        monHigh: high,\n        monLow: low,\n        monClose: close,\n        monTime: time\n      });\n    }); //Now, we need data for YEAR TO DATE. Past yr, eventually well exclude weekends...\n\n    start = Math.trunc(new Date(date.getFullYear(), 0, 1, 9, 30, 0, 0).getTime() / 1000);\n    end = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    fetch(\"https://finnhub.io/api/v1/stock/candle?symbol=\" + this.props.symbol + \"&resolution=D&from=\" + start + \"&to=\" + end + \"&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => this.setState({\n      ytdOpen: data.o,\n      ytdHigh: data.h,\n      ytdLow: data.l,\n      ytdClose: data.c,\n      ytdTime: data.t\n    })); //Now, we need data for 1 YEAR. Past yr, eventually well exclude weekends...\n\n    start = Math.trunc(new Date(date.getFullYear() - 1, date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    end = Math.trunc(new Date(date.getFullYear(), date.getMonth(), day, 16, 0, date.getSeconds(), date.getMilliseconds()).getTime() / 1000);\n    fetch(\"https://finnhub.io/api/v1/stock/candle?symbol=\" + this.props.symbol + \"&resolution=D&from=\" + start + \"&to=\" + end + \"&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => this.setState({\n      yrOpen: data.o,\n      yrHigh: data.h,\n      yrLow: data.l,\n      yrClose: data.c,\n      yrTime: data.t\n    }));\n  }\n\n  formatDateTime(date) {\n    //Formats date for plot.\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear().toString().substring(2, 4) + \" \" + date.toLocaleTimeString();\n  }\n\n  formatDate(date) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return monthNames[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"graph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chart-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      id: \"swap-data-but\",\n      onClick: this.swapPlotType.bind(this, \"line\"),\n      class: \"btn btn-light btn-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 127\n      }\n    }, \"show_chart\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      id: \"swap-data-but\",\n      onClick: this.swapPlotType.bind(this, \"candle\"),\n      class: \"btn btn-light btn-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 129\n      }\n    }, \"bar_chart\"))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"timePlot\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }\n    }), !document.getElementById(\"timePlot\") ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 11\n      }\n    }) : this.getLinearPlot());\n  }\n\n}\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/james/iCloud Drive (Archive)/Documents/Code/fin-app/frontend/src/components/ChartComponent.js"],"names":["React","Component","Plotly","Spinner","ChartComponent","constructor","props","getLinearPlot","dayTime","dayHigh","fiveTime","fiveHigh","monTime","monHigh","ytdTime","ytdHigh","yrHigh","yrTime","state","dayClose","dayLow","dayOpen","fiveClose","fiveLow","fiveOpen","monClose","monLow","monOpen","ytdClose","ytdLow","ytdOpen","yrClose","yrLow","yrOpen","dayColor","length","fiveColor","monColor","ytdColor","yrColor","linearData","type","mode","name","symbol","x","map","t","Date","toLocaleTimeString","y","line","color","visible","formatDateTime","connectgaps","formatDate","candlestickData","close","high","low","open","increasing","decreasing","xaxis","yaxis","updatemenus","buttons","args","label","method","direction","showactive","xanchor","yanchor","layout","rangeslider","showticklabels","showgrid","width","height","newPlot","plot","linearPlot","swapPlotType","setState","date","day","data","componentDidMount","getDate","console","log","getDay","start","Math","trunc","getFullYear","getMonth","getSeconds","getMilliseconds","getTime","end","fetch","then","res","json","o","h","l","c","startDay","time","i","getHours","getMinutes","push","toString","substring","monthNames","render","bind","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Plotly from \"plotly.js-dist\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport class ChartComponent extends Component {\n  constructor(props) {\n    super(props);\n    /*So, we got to grab array of opens, highs , lows frmo API. Have separate ones, first up is for \n            the 1 Day chart. Only need 9-5*/\n\n    this.state = {\n      date: new Date(), //Reference, need TODAYs, or YESTARDAYS... etc.\n      dayOpen: [],\n      day: {},\n      dayHigh: [],\n      dayLow: [],\n      dayClose: [],\n      dayTime: [],\n      data: {},\n      fiveOpen: [], //Five day chart data...\n      fiveHigh: [],\n      fiveLow: [],\n      fiveClose: [],\n      fiveTime: [],\n      monOpen: [], //One month chart data...\n      monHigh: [],\n      monLow: [],\n      monClose: [],\n      monTime: [],\n      ytdOpen: [], //Year to date chart data...\n      ytdHigh: [],\n      ytdLow: [],\n      ytdClose: [],\n      ytdTime: [],\n      ytdOpen: [], //Year chart data...\n      yrHigh: [],\n      yrLow: [],\n      yrClose: [],\n      yrTime: [],\n      plot: true,\n      linearPlot: true\n    };\n  }\n\n  componentDidMount() {\n    /*Time for some API calls!*/\n    //First, we got the 1 day one....relative to TODAYS date\n    //If its a WWEEKEND, we need to get the last market days info...\n    var day = this.state.date.getDate();\n    const date = this.state.date;\n    console.log(date.getDay())\n    if (date.getDay() == 6){//Its SATURDAY. Get FRIDAYS...\n         day -=1;\n    }\n    else if (date.getDay() == 0){//Its SUNDAY. Get FRIDAYS...\n      day -=2;\n    }\n    \n    var start =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        9,\n        30,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n    var end =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n      \n    //Now, well do an API call for ONE DAY.\n    fetch(\n      \"https://finnhub.io/api/v1/stock/candle?symbol=\" +\n        this.props.symbol +\n        \"&resolution=5&from=\" +\n        start +\n        \"&to=\" +\n        end +\n        \"&token=brain17rh5rbgnjpuck0\"\n    )\n      .then((res) => res.json())\n      .then((data) =>\n        this.setState({\n          dayOpen: data.o,\n          dayHigh: data.h,\n          dayLow: data.l,\n          dayClose: data.c,\n          dayTime: data.t,\n          date: data,\n        })\n      );\n\n      //Now, we need data for 5 DAYS. Past 5 days, EXCLUDING WEEKENDS.\n      var startDay = day-5;\n      start =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day-7,\n        9,\n        30,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n      end =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n    fetch(\n      \"https://finnhub.io/api/v1/stock/candle?symbol=\" +\n        this.props.symbol +\n        \"&resolution=30&from=\" +\n        start +\n        \"&to=\" +\n        end +\n        \"&token=brain17rh5rbgnjpuck0\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        var date = null;\n        var open = []\n        var high = []\n        var low = []\n        var close = []\n        var time = []\n        \n        if (data.o){\n          //Here, we just filter the API call results to the normal market hours, 9:30AM - 4PM\n          for (let i = 0; i < data.o.length; i++){\n            date = new Date(data.t[i] * 1000)\n            if (date.getHours() >= 9 && date.getHours() <= 16){\n              if (date.getHours() == 9){\n                if (date.getMinutes() >= 30){\n                  open.push(data.o[i])\n                  high.push(data.h[i])\n                  low.push(data.l[i])\n                  close.push(data.c[i])\n                  time.push(data.t[i])\n                }\n              }\n              else if (date.getHours() == 16){\n                if (date.getMinutes() < 30){\n                  open.push(data.o[i])\n                  high.push(data.h[i])\n                  low.push(data.l[i])\n                  close.push(data.c[i])\n                  time.push(data.t[i])\n                }\n              }\n              else{\n                open.push(data.o[i])\n                high.push(data.h[i])\n                low.push(data.l[i])\n                close.push(data.c[i])\n                time.push(data.t[i])\n              }   \n            }\n        }\n        }\n          this.setState({\n            fiveOpen: open,\n            fiveHigh: high,\n            fiveLow: low,\n            fiveClose: close,\n            fiveTime: time,\n          })\n        }\n      );\n\n      //Now, we need data for ONE MONTH. Past month, eventually well exclude weekends...\n      start =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth()-1,\n        day,\n        9,\n        30,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n      end =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n    fetch(\n      \"https://finnhub.io/api/v1/stock/candle?symbol=\" +\n        this.props.symbol +\n        \"&resolution=60&from=\" +\n        start +\n        \"&to=\" +\n        end +\n        \"&token=brain17rh5rbgnjpuck0\"\n    )\n      .then((res) => res.json())\n      .then((data) =>{\n        var date = null;\n        var open = []\n        var high = []\n        var low = []\n        var close = []\n        var time = []\n        //Here, we just filter the API call results to the normal market hours, 9:30AM - 4PM\n        for (let i = 0; i < data.o.length; i++){\n          date = new Date(data.t[i] * 1000)\n          if (date.getHours() >= 9 && date.getHours() <= 16){\n              open.push(data.o[i])\n              high.push(data.h[i])\n              low.push(data.l[i])\n              close.push(data.c[i])\n              time.push(data.t[i])\n            \n          }\n        }\n        this.setState({\n          monOpen: open,\n          monHigh: high,\n          monLow: low,\n          monClose: close,\n          monTime: time,\n        })\n      }\n        \n      );\n      //Now, we need data for YEAR TO DATE. Past yr, eventually well exclude weekends...\n      start =\n      Math.trunc(new Date(\n        date.getFullYear(),\n       0,\n        1,\n        9,\n        30,\n        0,\n        0\n      ).getTime() / 1000);\n      end =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n\n    fetch(\n      \"https://finnhub.io/api/v1/stock/candle?symbol=\" +\n        this.props.symbol +\n        \"&resolution=D&from=\" +\n        start +\n        \"&to=\" +\n        end +\n        \"&token=brain17rh5rbgnjpuck0\"\n    )\n      .then((res) => res.json())\n      .then((data) =>\n        this.setState({\n          ytdOpen: data.o,\n          ytdHigh: data.h,\n          ytdLow: data.l,\n          ytdClose: data.c,\n          ytdTime: data.t,\n        })\n      );\n\n      //Now, we need data for 1 YEAR. Past yr, eventually well exclude weekends...\n      start =\n      Math.trunc(new Date(\n        date.getFullYear()-1,\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n      end =\n      Math.trunc(new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        day,\n        16,\n        0,\n        date.getSeconds(),\n        date.getMilliseconds()\n      ).getTime() / 1000);\n\n      fetch(\n        \"https://finnhub.io/api/v1/stock/candle?symbol=\" +\n          this.props.symbol +\n          \"&resolution=D&from=\" +\n          start +\n          \"&to=\" +\n          end +\n          \"&token=brain17rh5rbgnjpuck0\"\n      )\n        .then((res) => res.json())\n        .then((data) =>\n          this.setState({\n            yrOpen: data.o,\n            yrHigh: data.h,\n            yrLow: data.l,\n            yrClose: data.c,\n            yrTime: data.t,\n          })\n        );\n        \n  }\n\n  getLinearPlot = () => {\n    //Simple displays linear plot, according to the parameter passed (Day, week, etc...)\n\n    //Linear data\n    const { dayTime, dayHigh, fiveTime, fiveHigh, monTime, monHigh, ytdTime, ytdHigh, yrHigh, yrTime } = this.state;\n    //CandlestickData\n    const {dayClose, dayLow, dayOpen, fiveClose, fiveLow, fiveOpen, monClose, monLow, monOpen, ytdClose,\n       ytdLow, ytdOpen, yrClose, yrLow, yrOpen} = this.state;\n    var dayColor = dayHigh? (dayHigh[0] <= dayHigh[dayHigh.length -1] ? 'green': 'red'): 'black'\n    var fiveColor = fiveHigh? (fiveHigh[0] <= fiveHigh[fiveHigh.length -1] ? 'green': 'red'): 'black'\n    var monColor = monHigh? (monHigh[0] <= monHigh[monHigh.length -1] ? 'green': 'red'): 'black'\n    var ytdColor = ytdHigh? (ytdHigh[0] <= ytdHigh[ytdHigh.length -1] ? 'green': 'red'): 'black'\n    var yrColor = yrHigh ? (yrHigh[0] <= yrHigh[yrHigh.length -1] ? 'green': 'red'): 'black'\n\n    var linearData = [\n      {\n        type: \"scatter\",\n        mode: \"lines\",\n        name:  this.props.symbol + \"High\",\n        x: dayTime  ? dayTime.map((t) => new Date(t * 1000).toLocaleTimeString()): [],\n        y: dayHigh ? dayHigh: [],\n        line: { color: dayColor},\n        visible: true,\n      },\n      {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol +\" High\",\n        x: fiveTime ? fiveTime.map((t) => this.formatDateTime(new Date(t * 1000))): [],\n        y: fiveHigh? fiveHigh: [],\n        connectgaps: true,\n        line: { color: fiveColor },\n        visible: false,\n      },\n      {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol +\" High\",\n        x: monTime ? monTime.map((t) => this.formatDateTime(new Date(t * 1000))): [],\n        y: monHigh? monHigh: [],\n        line: { color: monColor },\n        visible: false,\n        connectgaps: true\n      },\n      {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol +\" High\",\n        x: ytdTime ? ytdTime.map((t) => this.formatDate(new Date(t * 1000))): [],\n        y: ytdHigh? ytdHigh: [],\n        line: { color: ytdColor },\n        visible: false,\n        connectgaps: true\n      },\n      {\n        type: \"scatter\",\n        mode: \"lines\",\n        name: this.props.symbol +\" High\",\n        x: yrTime ? yrTime.map((t) => this.formatDate(new Date(t * 1000))): [],\n        y: yrHigh? yrHigh: [],\n        line: { color: yrColor },\n        visible: false,\n      },\n    ];\n\n    var candlestickData = [\n      {\n        x: dayTime  ? dayTime.map((t) => new Date(t * 1000).toLocaleTimeString()): [],\n        close: dayClose ? dayClose: [],\n        high: dayHigh ? dayHigh: [],\n        low: dayLow ? dayLow: [],\n        open: dayOpen ? dayOpen: [],\n        visible: true,\n        name: \"\",\n      \n        // cutomise colors\n        increasing: {line: {color: 'green'}},\n        decreasing: {line: {color: 'red'}},\n      \n        type: 'candlestick', \n        xaxis: 'x',\n        yaxis: 'y'\n      },\n      {\n        x: fiveTime  ? fiveTime.map((t) => this.formatDateTime(new Date(t * 1000))): [],\n        close: fiveClose ? fiveClose: [],\n        high: fiveHigh ? fiveHigh: [],\n        low: fiveLow ? fiveLow: [],\n        open: fiveOpen ? fiveOpen: [],\n        visible: false,\n        name: \"\",\n      \n        // cutomise colors\n        increasing: {line: {color: 'green'}},\n        decreasing: {line: {color: 'red'}},\n      \n        type: 'candlestick', \n        xaxis: 'x',\n        yaxis: 'y'\n      },\n      {\n        x: monTime  ? monTime.map((t) => this.formatDateTime(new Date(t * 1000))): [],\n        close: monClose ? monClose: [],\n        high: monHigh ? monHigh: [],\n        low: monLow ? monLow: [],\n        open: monOpen ? monOpen: [],\n        visible: false,\n        name: \"\",\n      \n        // cutomise colors\n        increasing: {line: {color: 'green'}},\n        decreasing: {line: {color: 'red'}},\n      \n        type: 'candlestick', \n        xaxis: 'x',\n        yaxis: 'y'\n      },\n      {\n        x: ytdTime  ? ytdTime.map((t) => this.formatDate(new Date(t * 1000))): [],\n        close: ytdClose ? ytdClose: [],\n        high: ytdHigh ? ytdHigh: [],\n        low: ytdLow ? ytdLow: [],\n        open: ytdOpen ? ytdOpen: [],\n        visible: false,\n        name: \"\",\n      \n        // cutomise colors\n        increasing: {line: {color: 'green'}},\n        decreasing: {line: {color: 'red'}},\n      \n        type: 'candlestick', \n        xaxis: 'x',\n        yaxis: 'y'\n      },\n      {\n        x: yrTime  ? yrTime.map((t) => this.formatDate(new Date(t * 1000))): [],\n        close: yrClose ? yrClose: [],\n        high: yrHigh ? yrHigh: [],\n        low: yrLow ? yrLow: [],\n        open: yrOpen ? yrOpen: [],\n        visible: false,\n        name: \"\",\n      \n        // cutomise colors\n        increasing: {line: {color: 'green'}},\n        decreasing: {line: {color: 'red'}},\n      \n        type: 'candlestick', \n        xaxis: 'x',\n        yaxis: 'y'\n      },\n    ]\n\n\n    var updatemenus=[\n      {\n          buttons: [\n              {\n                  args: [{'visible': [true, false, false, false, false]}],\n                  label: '1D',\n                  method: 'update'\n              },\n              {\n                  args: [{'visible': [false, true, false, false, false]}\n                         ],\n                  label: '5D',\n                  method: 'update'\n              },\n              {\n                args: [{'visible': [false, false, true, false, false]}\n                       ],\n                label: '1M',\n                method: 'update'\n            },\n            {\n              args: [{'visible': [false, false, false, true, false]}\n                     ],\n              label: 'YTD',\n              method: 'update'\n          },\n          {\n            args: [{'visible': [false, false, false, false, true]}\n                   ],\n            label: '1Y',\n            method: 'update'\n        },\n          ],\n          direction: 'left',\n          showactive: true,\n          type: 'buttons',\n          x: 0.0,\n          xanchor: 'left',\n          y: 1.1,\n          yanchor: 'top'\n      },\n  \n  ]\n\n    var layout = {\n      updatemenus: updatemenus,\n      xaxis: {\n        rangeslider: {\n         visible: true\n       },\n       showticklabels: false,\n       type: 'category',\n       showgrid: false\n      },\n      width: 900,\n      height: 500,\n    };\n\n    Plotly.newPlot(\"timePlot\", this.state.plot? this.state.linearPlot? linearData: candlestickData: null, layout);\n  };\n\n  formatDateTime(date){//Formats date for plot.\n    return (date.getMonth()+1) + \"/\" + date.getDate() + \"/\" + date.getFullYear().toString().substring(2, 4) + \" \" + date.toLocaleTimeString()\n  }\n\n  formatDate(date){\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return monthNames[date.getMonth()] +\" \"+ date.getDate() + \", \" + date.getFullYear()\n  }\n\n  swapPlotType = (type) => {\n    if (type == \"line\")\n      this.setState({\n        linearPlot: true\n      })\n    else if (type == \"candle\"){\n      this.setState({\n        linearPlot: false\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"graph\">\n        <div id=\"chart-buttons\">\n          <button type=\"button\" id=\"swap-data-but\" onClick={this.swapPlotType.bind(this, \"line\")}class=\"btn btn-light btn-sm\"><span class=\"material-icons\">show_chart</span></button>\n          <button type=\"button\" id=\"swap-data-but\" onClick={this.swapPlotType.bind(this, \"candle\")}class=\"btn btn-light btn-sm\"><span class=\"material-icons\">bar_chart</span></button>\n        </div>\n        \n        <div id=\"timePlot\">\n          \n        </div>\n        {!document.getElementById(\"timePlot\") ? (\n          <Spinner />\n        ) : (\n          this.getLinearPlot()\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}