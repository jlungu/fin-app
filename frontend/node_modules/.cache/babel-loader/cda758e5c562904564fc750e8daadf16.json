{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_WATCHLISTS } from \"./types\"; //ADD NEW WATCHLIST\n\nexport const addWatchlist = (watchlist, newUser) => dispatch => {\n  //If its a new user, we need to create the watchlists item in local storage\n  if (newUser) {\n    axios.post(\"/api/watchlists/add\", watchlist).then(() => dispatch(setWatchlists([watchlist]))) //Updating state.\n    .catch(err => dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }));\n  } else {\n    let oldWatchlists = localStorage.getItem(\"watchlists\");\n    axios.post(\"/api/watchlists/add\", watchlist).then(res => dispatch(setWatchlists(oldWatchlists.push(watchlist)))).catch(err => dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }));\n  }\n}; //UPDATE EXISTING WATCHLIST\n\nexport const updateWatchlist = (id, wl, watchLists) => dispatch => {\n  axios.post(\"/api/watchlists/update/\" + id, wl).then(res => {\n    //Filtering them out, splicing out the given id\n    watchLists = watchLists.filter(wl => wl.id != id);\n    watchLists.push(res); //NOW have correct watchlists!\n\n    dispatch(setWatchlists(watchLists));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //GET ALL WATCHLISTS\n\nexport const getWatchlists = userEmail => dispatch => {\n  axios.get(\"/api/watchlists/getAllWithEmail\", {\n    email: \"jlungu@eia.us\"\n  }).then(res => {\n    console.log(buildResponse(res));\n    dispatch(setWatchlists(res));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //DELETE WATCHLISTS\n\nexport const deleteWatchlist = (id, watchLists) => dispatch => {\n  axios.prototype(\"/api/watchlists/delete/\" + id, {}).then(() => {\n    let watchlists = localStorage.getItem(\"watchlists\");\n    dispatch(setWatchlists(watchlists.filter(wl => wl.id != id))); //Splicing out that watchlist.\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //Sets the watchlist we have in state.\n\nexport const setWatchlists = watchlists => {\n  return {\n    type: SET_CURRENT_WATCHLISTS,\n    payload: watchlists\n  };\n};","map":{"version":3,"sources":["/Users/james/iCloud Drive (Archive)/Documents/Code/fin-app/frontend/src/actions/watchlistActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_WATCHLISTS","addWatchlist","watchlist","newUser","dispatch","post","then","setWatchlists","catch","err","type","payload","response","data","oldWatchlists","localStorage","getItem","res","push","updateWatchlist","id","wl","watchLists","filter","getWatchlists","userEmail","get","email","console","log","buildResponse","deleteWatchlist","prototype","watchlists"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nimport { GET_ERRORS, SET_CURRENT_WATCHLISTS } from \"./types\"\n\n//ADD NEW WATCHLIST\nexport const addWatchlist = (watchlist, newUser) => dispatch => {\n    //If its a new user, we need to create the watchlists item in local storage\n    if (newUser){\n        axios.post(\"/api/watchlists/add\", watchlist)\n            .then(() => dispatch(setWatchlists([watchlist])))//Updating state.\n            .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n    }\n    else {\n        let oldWatchlists = localStorage.getItem(\"watchlists\")\n        axios.post(\"/api/watchlists/add\", watchlist)\n            .then(res => dispatch(setWatchlists((oldWatchlists.push(watchlist)))))\n            .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n    }\n}\n\n//UPDATE EXISTING WATCHLIST\nexport const updateWatchlist = (id, wl, watchLists) => dispatch => {\n    axios.post(\"/api/watchlists/update/\"+id, wl)\n        .then(res => {\n            //Filtering them out, splicing out the given id\n            watchLists = watchLists.filter(wl => wl.id != id)\n            watchLists.push(res)//NOW have correct watchlists!\n            dispatch(setWatchlists(watchLists))\n        })\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data})) \n}\n\n//GET ALL WATCHLISTS\nexport const getWatchlists = (userEmail) => dispatch => {\n    axios.get(\"/api/watchlists/getAllWithEmail\", {email: \"jlungu@eia.us\"})\n        .then(res => {\n            console.log(buildResponse(res))\n            dispatch(setWatchlists(res))})\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data})) \n}\n\n//DELETE WATCHLISTS\nexport const deleteWatchlist = (id, watchLists) => dispatch => {\n    axios.prototype(\"/api/watchlists/delete/\"+id, {})\n        .then(() => {\n            let watchlists = localStorage.getItem(\"watchlists\")\n            dispatch(setWatchlists(watchlists.filter(wl => wl.id != id)))//Splicing out that watchlist.\n        })\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n}\n\n//Sets the watchlist we have in state.\nexport const setWatchlists = watchlists => {\n    return{\n        type: SET_CURRENT_WATCHLISTS,\n        payload: watchlists\n    }\n}"]},"metadata":{},"sourceType":"module"}