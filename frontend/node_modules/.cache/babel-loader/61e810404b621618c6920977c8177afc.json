{"ast":null,"code":"var _jsxFileName = \"/home/jlungu/Desktop/fin_app/frontend/src/components/SearchBarComponent.js\";\nimport React, { Component } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nconst stocks = []; //HOW should the autocomplete get suggestions?\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : stocks.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; //How the autosuggest should populate names.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; //Rendering the actual names in div!\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}, suggestion.name);\n\nexport class SearchBarComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  componentDidMount() {\n    //API Call to get list of supported stocks!\n    fetch(\"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=brain17rh5rbgnjpuck0\").then(res => res.json()).then(data => {\n      var sugg = []; //Want array of this structure; SYMBOL - DESCRIPTION\n\n      data.forEach(function (item, index, array) {\n        sugg.push(data[index].displaySymbol + \" - \" + data[index].description);\n      }); //Setting our suggestions state to this new array!\n\n      this.setState({\n        suggestions: sugg\n      });\n    });\n  } //Autosuggest func #1, updating value to fit new suggestions\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: \"Stock Ticker or Name...\",\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\nexport default SearchBarComponent;","map":{"version":3,"sources":["/home/jlungu/Desktop/fin_app/frontend/src/components/SearchBarComponent.js"],"names":["React","Component","Autosuggest","stocks","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","SearchBarComponent","constructor","props","onChange","event","newValue","method","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","componentDidMount","fetch","then","res","json","data","sugg","forEach","item","index","array","push","displaySymbol","description","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\n\nconst stocks =[\n    \n]\n\n\n//HOW should the autocomplete get suggestions?\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n  \n    return inputLength === 0 ? [] : stocks.filter(lang =>\n      lang.name.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n  \n  //How the autosuggest should populate names.\n  const getSuggestionValue = suggestion => suggestion.name;\n  \n  //Rendering the actual names in div!\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\nexport class SearchBarComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      suggestions: [],\n    };\n  }\n\n  componentDidMount() {\n    //API Call to get list of supported stocks!\n    fetch(\n      \"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=brain17rh5rbgnjpuck0\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        var sugg = [];\n        //Want array of this structure; SYMBOL - DESCRIPTION\n        data.forEach(function (item, index, array) {\n          sugg.push(\n            data[index].displaySymbol + \" - \" + data[index].description\n          );\n        });\n        //Setting our suggestions state to this new array!\n        this.setState({\n          suggestions: sugg,\n        });\n      });\n  }\n\n  //Autosuggest func #1, updating value to fit new suggestions\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  //Autosuggest func #2, getting suggestions on a 'change'\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  //Autosuggest func #3, clearing suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Stock Ticker or Name...\",\n      value,\n      onChange: this.onChange,\n    };\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\nexport default SearchBarComponent;\n"]},"metadata":{},"sourceType":"module"}