{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_WATCHLISTS, USER_LOADING } from \"./types\"; //ADD NEW WATCHLIST\n\nexport const addWatchlist = (watchlist, newUser) => dispatch => {\n  //If its a new user, we need to create the watchlists item in local storage\n  if (newUser) {\n    axios.post(\"/api/watchlists/add\", watchlist).then(() => dispatch(setWatchlists([watchlist]))) //Updating state.\n    .catch(err => dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }));\n  } else {\n    let oldWatchlists = localStorage.getItem(\"watchlists\");\n    axios.post(\"/api/watchlists/add\", watchlist).then(res => dispatch(setWatchlists(oldWatchlists.push(watchlist)))).catch(err => dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }));\n  }\n}; //UPDATE EXISTING WATCHLIST\n\nexport const updateWatchlist = (id, watchLists) => dispatch => {\n  axios.post(\"/api/watchlists/update/\" + id, watchlist).then(res => {\n    //Filtering them out, splicing out the given id\n    watchLists = watchLists.filter(wl => wl.id != id);\n    watchLists.push(res); //NOW have correct watchlists!\n\n    dispatch(setWatchlists(watchLists));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //GET ALL WATCHLISTS\n\nexport const getWatchlists = userEmail => dispatch => {\n  axios.post(\"/api/watchlists/getAllWithEmail\", {\n    email: userEmail\n  }).then(res => dispatch(setWatchlists(res))).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //DELETE WATCHLISTS\n\nexport const deleteWatchlist = (id, watchLists) => dispatch => {\n  axios.prototype(\"api/watchlists/delete/\" + id, {}).then(() => {\n    let watchlists = localStorage.getItem(\"watchlists\");\n    dispatch(setWatchLists(watchlists.filter(wl => wl.id != id))); //Splicing out that watchlist.\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //Sets the watchlist we have in state.\n\nexport const setWatchLists = watchlists => {\n  return {\n    type: SET_CURRENT_WATCHLISTS,\n    payload: watchlists\n  };\n};","map":{"version":3,"sources":["/Users/james/iCloud Drive (Archive)/Documents/Code/fin-app/frontend/src/actions/watchlistActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_WATCHLISTS","USER_LOADING","addWatchlist","watchlist","newUser","dispatch","post","then","setWatchlists","catch","err","type","payload","response","data","oldWatchlists","localStorage","getItem","res","push","updateWatchlist","id","watchLists","filter","wl","getWatchlists","userEmail","email","deleteWatchlist","prototype","watchlists","setWatchLists"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nimport { GET_ERRORS, SET_CURRENT_WATCHLISTS, USER_LOADING } from \"./types\"\n\n//ADD NEW WATCHLIST\nexport const addWatchlist = (watchlist, newUser) => dispatch => {\n    //If its a new user, we need to create the watchlists item in local storage\n    if (newUser){\n        axios.post(\"/api/watchlists/add\", watchlist)\n            .then(() => dispatch(setWatchlists([watchlist])))//Updating state.\n            .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n    }\n    else {\n        let oldWatchlists = localStorage.getItem(\"watchlists\")\n        axios.post(\"/api/watchlists/add\", watchlist)\n            .then(res => dispatch(setWatchlists((oldWatchlists.push(watchlist)))))\n            .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n    }\n}\n\n//UPDATE EXISTING WATCHLIST\nexport const updateWatchlist = (id, watchLists) => dispatch => {\n    axios.post(\"/api/watchlists/update/\"+id, watchlist)\n        .then(res => {\n            //Filtering them out, splicing out the given id\n            watchLists = watchLists.filter(wl => wl.id != id)\n            watchLists.push(res)//NOW have correct watchlists!\n            dispatch(setWatchlists(watchLists))\n        })\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data})) \n}\n\n//GET ALL WATCHLISTS\nexport const getWatchlists = (userEmail) => dispatch => {\n    axios.post(\"/api/watchlists/getAllWithEmail\", {email: userEmail})\n        .then(res => dispatch(setWatchlists(res)))\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data})) \n}\n\n//DELETE WATCHLISTS\nexport const deleteWatchlist = (id, watchLists) => dispatch => {\n    axios.prototype(\"api/watchlists/delete/\"+id, {})\n        .then(() => {\n            let watchlists = localStorage.getItem(\"watchlists\")\n            dispatch(setWatchLists(watchlists.filter(wl => wl.id != id)))//Splicing out that watchlist.\n        })\n        .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n}\n\n//Sets the watchlist we have in state.\nexport const setWatchLists = watchlists => {\n    return{\n        type: SET_CURRENT_WATCHLISTS,\n        payload: watchlists\n    }\n}"]},"metadata":{},"sourceType":"module"}